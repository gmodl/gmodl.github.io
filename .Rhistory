rmarkdown::render_site(encoding = "UTF-8")
rmarkdown::render_site(encoding = "UTF-8")
rmarkdown::render_site(encoding = "UTF-8")
rmarkdown::render_site(encoding = "UTF-8")
rmarkdown::render_site(encoding = "UTF-8")
rmarkdown::render_site(encoding = "UTF-8")
rmarkdown::render_site(encoding = "UTF-8")
rmarkdown::render_site(encoding = "UTF-8")
rmarkdown::render_site(encoding = "UTF-8")
rmarkdown::render_site(encoding = "UTF-8")
rmarkdown::render_site(encoding = "UTF-8")
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo=FALSE, message = FALSE, warning = FALSE)
library(sp)
library(rgdal)
library(leaflet)
prod_miel <- readOGR("geodata", "ent_a", verbose=FALSE)
map_prod_miel <- leaflet(data=prod_miel)
breaks <- c(0,2,4,6,8,10)
binpal <- colorBin("Blues", prod_miel$total2017, breaks)
map_prod_miel %>%
setView(lng = -102.43, lat = 22.37, zoom = 5.4) %>%
addTiles() %>%
addPolygons(
stroke = FALSE,
fillOpacity = 0.7,
smoothFactor = 0.1,
color = ~binpal(total2014),
popup = paste0("<strong>CVE_ENT: </strong>", prod_miel$CVE_ENT, "</br>",
"<strong>NOMGEO: </strong>", prod_miel$NOMGEO, "</br>",
"<strong>total2014: </strong>", prod_miel$total2014)
) %>%
addLegend(
"bottomleft", pal = binpal, values = ~total2017,
title = "Producción de Miel (Miles de toneladas)",
opacity = 0.7
)
knitr::opts_chunk$set(echo=FALSE, message = FALSE, warning = FALSE)
library(sp)
library(rgdal)
library(leaflet)
prod_miel <- readOGR("geodata", "ent_a", verbose=FALSE)
map_prod_miel <- leaflet(data=prod_miel)
breaks <- c(0,2,4,6,8,10)
binpal <- colorBin("Blues", prod_miel$total2017, breaks)
map_prod_miel %>%
setView(lng = -102.43, lat = 22.37, zoom = 5.4) %>%
addTiles() %>%
addPolygons(
stroke = FALSE,
fillOpacity = 0.7,
smoothFactor = 0.1,
color = ~binpal(total2017),
popup = paste0("<strong>CVE_ENT: </strong>", prod_miel$CVE_ENT, "</br>",
"<strong>NOMGEO: </strong>", prod_miel$NOMGEO, "</br>",
"<strong>total2014: </strong>", prod_miel$total2017)
) %>%
addLegend(
"bottomleft", pal = binpal, values = ~total2017,
title = "Producción de Miel (Miles de toneladas)",
opacity = 0.7
)
knitr::opts_chunk$set(echo=FALSE, message = FALSE, warning = FALSE)
library(sp)
library(rgdal)
library(leaflet)
prod_miel <- readOGR("geodata", "ent_a", verbose=FALSE)
map_prod_miel <- leaflet(data=prod_miel)
breaks <- c(0,2,4,6,8,10)
binpal <- colorBin("Blues", prod_miel$total2017, breaks)
map_prod_miel %>%
setView(lng = -102.43, lat = 22.37, zoom = 5.4) %>%
addTiles() %>%
addPolygons(
stroke = FALSE,
fillOpacity = 0.7,
smoothFactor = 0.1,
color = ~binpal(total2017),
popup = paste0("<strong>CVE_ENT: </strong>", prod_miel$CVE_ENT, "</br>",
"<strong>NOMGEO: </strong>", prod_miel$NOMGEO, "</br>",
"<strong>total2014: </strong>", prod_miel$total2017)
) %>%
addLegend(
"bottomleft", pal = binpal, values = ~total2017,
title = "Producción de Miel <br/> (Miles de toneladas)",
opacity = 0.7
)
library(dygraphs)
bhvs <- read.csv("tabs/BeehivesMX.csv")
Colmenas <- bhvs$Colmenas
p_anual_colmenas <- ts(Colmenas, start= 1961, end= 2016 , frequency=1)
dygraph(p_anual_colmenas, main = "Promedio anual de colmenas en México 1961 - 2016", xlab ="Año") %>%
dySeries(c("V1"), label = "Promedio de Colmenas") %>%
dyRangeSelector(dateWindow = c("1960", "2020"))
library(dygraphs)
bhvs <- read.csv("tabs/BeehivesMX.csv")
Colmenas <- bhvs$Colmenas
p_anual_colmenas <- ts(Colmenas, start= 1961, end= 2016 , frequency=1)
dygraph(p_anual_colmenas, main = "Promedio anual de colmenas en México 1961 - 2016", xlab ="Año") %>%
dySeries(c("V1"), label = "Promedio de Colmenas") %>%
dyRangeSelector(dateWindow = c(1960, 2020))
library(dygraphs)
bhvs <- read.csv("tabs/BeehivesMX.csv")
Colmenas <- bhvs$Colmenas
p_anual_colmenas <- ts(Colmenas, start= 1961, end= 2016 , frequency=1)
dygraph(p_anual_colmenas, main = "Promedio anual de colmenas en México 1961 - 2016", xlab ="Año") %>%
dySeries(c("V1"), label = "Promedio de Colmenas") %>%
dyRangeSelector(dateWindow = c("1960-01-01", "2020-01-01"))
library(DT)
bhvs <- read.csv("tabs/BeehivesMX.csv")
names(bhvs) <- c("Año", "Colmenas en México")
DT::datatable(bhvs,filter = 'top', options = list(
pageLength = 5, autoWidth = TRUE, language = list(url = '//cdn.datatables.net/plug-ins/1.10.11/i18n/Spanish.json')
))
tab0003 <- read.csv("tabs/t0003.csv")
names(tab0003) <- c( "Estado", "Nombre", "Ubicación","Capacidad de producción")
DT::datatable(tab0003,filter = 'top', options = list(
pageLength = 5, autoWidth = TRUE, language = list(url = '//cdn.datatables.net/plug-ins/1.10.11/i18n/Spanish.json')
))
tab3_16 <- read.csv("tabs/3_16_1_exportamiel.csv")
names(tab3_16) <- c( "AÑO","MES", "Exportación Miel (miles de dolares)")
DT::datatable(tab3_16,filter = 'top', options = list(
pageLength = 5, autoWidth = TRUE, language = list(url = '//cdn.datatables.net/plug-ins/1.10.11/i18n/Spanish.json')
))
library(DT)
tab0010 <- read.csv("tabs/Ranking_tab_1_s.csv")
DT::datatable(tab0010[,-2],filter = 'top', options = list(
pageLength = 5, autoWidth = TRUE, scrollX = TRUE,
fixedColumns = TRUE, language = list(url = '//cdn.datatables.net/plug-ins/1.10.11/i18n/Spanish.json')
))
tab0001 <- read.csv("tabs/t001.csv")
names(tab0001) <- c( "Estado", "Nombre", "Ubicación","Capacidad de producción")
DT::datatable(tab0001,filter = 'top', options = list(
pageLength = 5, autoWidth = TRUE, language = list(url = '//cdn.datatables.net/plug-ins/1.10.11/i18n/Spanish.json')
))
tab0002 <- read.csv("tabs/t0002.csv")
names(tab0002) <- c( "Estado", "Nombre", "Ubicación","Capacidad de producción")
DT::datatable(tab0002,filter = 'top', options = list(
pageLength = 5, autoWidth = TRUE, language = list(url = '//cdn.datatables.net/plug-ins/1.10.11/i18n/Spanish.json')
))
tab0003 <- read.csv("tabs/t0003.csv")
names(tab0003) <- c( "Estado", "Nombre", "Ubicación","Capacidad de producción")
DT::datatable(tab0003,filter = 'top', options = list(
pageLength = 5, autoWidth = TRUE, language = list(url = '//cdn.datatables.net/plug-ins/1.10.11/i18n/Spanish.json')
))
rmarkdown::render_site(encoding = "UTF-8")
rmarkdown::render_site(encoding = "UTF-8")
rmarkdown::render_site(encoding = "UTF-8")
library(DT)
bhvs <- read.csv("tabs/BeehivesMX.csv")
names(bhvs) <- c("Año", "Colmenas en México")
DT::datatable(bhvs,filter = 'top', options = list(
pageLength = 5, autoWidth = TRUE, language = list(url="//cdn.datatables.net/plug-ins/1.10.11/i18n/Spanish.json")
))
library(DT)
bhvs <- read.csv("tabs/BeehivesMX.csv")
names(bhvs) <- c("Año", "Colmenas en México")
DT::datatable(bhvs,filter = 'top', options = list(
autoWidth = TRUE, language = list(url="//cdn.datatables.net/plug-ins/1.10.11/i18n/Spanish.json"),pageLength = 5
))
tab0002 <- read.csv("tabs/t0002.csv")
names(tab0002) <- c( "Estado", "Nombre", "Ubicación","Capacidad de producción")
DT::datatable(tab0002,filter = 'top', options = list(
pageLength = 5, autoWidth = TRUE,   language = list(
info = "Mostrando registros del _START_ al _END_ de un total de _TOTAL_ registros",
paginate = list(previous = 'Anterior', `next` = 'Siguiente'),
search =  "Buscar:", lengthMenu = "Mostrar _MENU_ registros" )
))
tab0001 <- read.csv("tabs/t001.csv")
names(tab0001) <- c( "Estado", "Nombre", "Ubicación","Capacidad de producción")
DT::datatable(tab0001,filter = 'top', options = list(
pageLength = 5, autoWidth = TRUE, language = list(
info = "Mostrando registros del _START_ al _END_ de un total de _TOTAL_ registros",
paginate = list(previous = 'Anterior', `next` = 'Siguiente'),
search =  "Buscar:", lengthMenu = "Mostrar _MENU_ registros" )
))
library(DT)
tab0010 <- read.csv("tabs/Ranking_tab_1_s.csv")
DT::datatable(tab0010[,-2],filter = 'top', options = list(
pageLength = 5, autoWidth = TRUE, scrollX = TRUE,
fixedColumns = TRUE, language = list(
info = "Mostrando registros del _START_ al _END_ de un total de _TOTAL_ registros",
paginate = list(previous = 'Anterior', `next` = 'Siguiente'),
search =  "Buscar:", lengthMenu = "Mostrar _MENU_ registros" )
))
tab3_16 <- read.csv("tabs/3_16_1_exportamiel.csv")
names(tab3_16) <- c( "AÑO","MES", "Exportación Miel (miles de dolares)")
DT::datatable(tab3_16,filter = 'top', options = list(
pageLength = 5, autoWidth = TRUE, language = list(
info = "Mostrando registros del _START_ al _END_ de un total de _TOTAL_ registros",
paginate = list(previous = 'Anterior', `next` = 'Siguiente'),
search =  "Buscar:", lengthMenu = "Mostrar _MENU_ registros" )
))
tab0003 <- read.csv("tabs/t0003.csv")
names(tab0003) <- c( "Estado", "Nombre", "Ubicación","Capacidad de producción")
DT::datatable(tab0003,filter = 'top', options = list(
pageLength = 5, autoWidth = TRUE, language = list(
info = "Mostrando registros del _START_ al _END_ de un total de _TOTAL_ registros",
paginate = list(previous = 'Anterior', `next` = 'Siguiente'),
search =  "Buscar:", lengthMenu = "Mostrar _MENU_ registros" )
))
library(dygraphs)
bhvs <- read.csv("tabs/BeehivesMX.csv")
Colmenas <- bhvs$Colmenas
p_anual_colmenas <- ts(Colmenas, start= 1961, end= 2016 , frequency=1)
dygraph(p_anual_colmenas, main = "Promedio anual de colmenas en México 1961 - 2016", xlab ="Año") %>%
dySeries(c("V1"), label = "Promedio de Colmenas") %>%
dyRangeSelector(dateWindow = c("1960-01-01", "2018-01-01"))
library(DT)
bhvs <- read.csv("tabs/BeehivesMX.csv")
names(bhvs) <- c("Año", "Colmenas en México")
DT::datatable(bhvs,filter = 'top', options = list(
autoWidth = TRUE,pageLength = 5, language = list(
info = "Mostrando registros del _START_ al _END_ de un total de _TOTAL_ registros",
paginate = list(previous = 'Anterior', `next` = 'Siguiente'),
search =  "Buscar:", lengthMenu = "Mostrar _MENU_ registros" )))
knitr::opts_chunk$set(echo = TRUE)
knitr::include_graphics("imag/Portada1x.png")
knitr::include_graphics("imag/Portada1x.png")
knitr::include_graphics("imag/Portada1x.jpg")
knitr::opts_chunk$set(echo = TRUE)
library(sp)
library(rgdal)
library(leaflet)
library(htmltools)
library(htmlwidgets)
proApicola <- readOGR("geodata/INEGI_DENUE_21012019_APICOLA/INEGI_DENUE_21012019.shp",
"INEGI_DENUE_21012019", verbose=FALSE)
#dim(proApicola@data)
x0 <- rep("Producto apícola",84)
#names(proApicola@data)
#head(proApicola@data)
proApicola@data <- cbind(proApicola@data, x0)
proMiel <- readOGR("geodata/INEGI_DENUE_21012019_MIEL/INEGI_DENUE_21012019.shp",
"INEGI_DENUE_21012019", verbose=FALSE)
ueMiel <- subset(proMiel, proMiel@data$codigo_act == 311999
| proMiel@data$codigo_act == 321920
| proMiel@data$codigo_act == 325412
| proMiel@data$codigo_act == 325610
| proMiel@data$codigo_act == 431194
| proMiel@data$codigo_act == 431199
| proMiel@data$codigo_act == 461190
| proMiel@data$codigo_act == 461130
| proMiel@data$codigo_act == 461140
| proMiel@data$codigo_act == 461150
| proMiel@data$codigo_act == 464113
| proMiel@data$codigo_act == 493130 )
x0 <- rep("Venta de Miel",861)
ueMiel@data <- cbind(ueMiel@data, x0)
ueMielApic <- raster::bind(ueMiel, proApicola)
quakes.df <- split(ueMielApic, ueMielApic$x0)
l <- leaflet() %>% addTiles()
names(quakes.df) %>%
purrr::walk( function(df) {
l <<- l %>%
addMarkers(data=quakes.df[[df]],
group = df,
clusterOptions = markerClusterOptions(removeOutsideVisibleBounds = F),
popup = paste0( "<strong>id: </strong>", quakes.df[[df]]$id, "</br>",
"<strong>NOMBRE_ESTABLECIMIENTO: </strong>", quakes.df[[df]]$nom_estab, "</br>",
"<strong>TIPO: </strong>", quakes.df[[df]]$nombre_act, "</br>",
"<strong>MUNICIPIO: </strong>", quakes.df[[df]]$municipio, "</br>",
"<strong>ENTIDAD: </strong>", quakes.df[[df]]$entidad
)
)
})
l %>%
addMiniMap(toggleDisplay = TRUE, position = "bottomleft") %>%
addMeasure(
position = "bottomleft",
primaryLengthUnit = "meters",
primaryAreaUnit = "sqmeters",
activeColor = "#3D535D",
completedColor = "#7D4479")%>%
addEasyButton(easyButton(
icon="fa-crosshairs",
title="Locate Me",
onClick=JS("function(btn, map){ map.locate({setView: true}); }"))) %>%
addLayersControl(
overlayGroups = names(quakes.df),
options = layersControlOptions(collapsed = FALSE)
)
library(sp)
library(rgdal)
library(leaflet)
library(htmltools)
library(htmlwidgets)
proApicola <- readOGR("geodata/INEGI_DENUE_21012019_APICOLA/INEGI_DENUE_21012019.shp",
"INEGI_DENUE_21012019", verbose=FALSE)
#dim(proApicola@data)
x0 <- rep("Producto apícola",84)
#names(proApicola@data)
#head(proApicola@data)
proApicola@data <- cbind(proApicola@data, x0)
proMiel <- readOGR("geodata/INEGI_DENUE_21012019_MIEL/INEGI_DENUE_21012019.shp",
"INEGI_DENUE_21012019", verbose=FALSE)
ueMiel <- subset(proMiel, proMiel@data$codigo_act == 311999
| proMiel@data$codigo_act == 321920
| proMiel@data$codigo_act == 325412
| proMiel@data$codigo_act == 325610
| proMiel@data$codigo_act == 431194
| proMiel@data$codigo_act == 431199
| proMiel@data$codigo_act == 461190
| proMiel@data$codigo_act == 461130
| proMiel@data$codigo_act == 461140
| proMiel@data$codigo_act == 461150
| proMiel@data$codigo_act == 464113
| proMiel@data$codigo_act == 493130 )
x0 <- rep("Venta de Miel",861)
ueMiel@data <- cbind(ueMiel@data, x0)
ueMielApic <- raster::bind(ueMiel, proApicola)
quakes.df <- split(ueMielApic, ueMielApic$x0)
l <- leaflet(width = "100%") %>% addTiles()
names(quakes.df) %>%
purrr::walk( function(df) {
l <<- l %>%
addMarkers(data=quakes.df[[df]],
group = df,
clusterOptions = markerClusterOptions(removeOutsideVisibleBounds = F),
popup = paste0( "<strong>id: </strong>", quakes.df[[df]]$id, "</br>",
"<strong>NOMBRE_ESTABLECIMIENTO: </strong>", quakes.df[[df]]$nom_estab, "</br>",
"<strong>TIPO: </strong>", quakes.df[[df]]$nombre_act, "</br>",
"<strong>MUNICIPIO: </strong>", quakes.df[[df]]$municipio, "</br>",
"<strong>ENTIDAD: </strong>", quakes.df[[df]]$entidad
)
)
})
l %>%
addMiniMap(toggleDisplay = TRUE, position = "bottomleft") %>%
addMeasure(
position = "bottomleft",
primaryLengthUnit = "meters",
primaryAreaUnit = "sqmeters",
activeColor = "#3D535D",
completedColor = "#7D4479")%>%
addEasyButton(easyButton(
icon="fa-crosshairs",
title="Locate Me",
onClick=JS("function(btn, map){ map.locate({setView: true}); }"))) %>%
addLayersControl(
overlayGroups = names(quakes.df),
options = layersControlOptions(collapsed = FALSE)
)
library(sp)
library(rgdal)
library(leaflet)
library(htmltools)
library(htmlwidgets)
proApicola <- readOGR("geodata/INEGI_DENUE_21012019_APICOLA/INEGI_DENUE_21012019.shp",
"INEGI_DENUE_21012019", verbose=FALSE)
#dim(proApicola@data)
x0 <- rep("Producto apícola",84)
#names(proApicola@data)
#head(proApicola@data)
proApicola@data <- cbind(proApicola@data, x0)
proMiel <- readOGR("geodata/INEGI_DENUE_21012019_MIEL/INEGI_DENUE_21012019.shp",
"INEGI_DENUE_21012019", verbose=FALSE)
ueMiel <- subset(proMiel, proMiel@data$codigo_act == 311999
| proMiel@data$codigo_act == 321920
| proMiel@data$codigo_act == 325412
| proMiel@data$codigo_act == 325610
| proMiel@data$codigo_act == 431194
| proMiel@data$codigo_act == 431199
| proMiel@data$codigo_act == 461190
| proMiel@data$codigo_act == 461130
| proMiel@data$codigo_act == 461140
| proMiel@data$codigo_act == 461150
| proMiel@data$codigo_act == 464113
| proMiel@data$codigo_act == 493130 )
x0 <- rep("Venta de Miel",861)
ueMiel@data <- cbind(ueMiel@data, x0)
ueMielApic <- raster::bind(ueMiel, proApicola)
quakes.df <- split(ueMielApic, ueMielApic$x0)
l <- leaflet(width = "200%") %>% addTiles()
names(quakes.df) %>%
purrr::walk( function(df) {
l <<- l %>%
addMarkers(data=quakes.df[[df]],
group = df,
clusterOptions = markerClusterOptions(removeOutsideVisibleBounds = F),
popup = paste0( "<strong>id: </strong>", quakes.df[[df]]$id, "</br>",
"<strong>NOMBRE_ESTABLECIMIENTO: </strong>", quakes.df[[df]]$nom_estab, "</br>",
"<strong>TIPO: </strong>", quakes.df[[df]]$nombre_act, "</br>",
"<strong>MUNICIPIO: </strong>", quakes.df[[df]]$municipio, "</br>",
"<strong>ENTIDAD: </strong>", quakes.df[[df]]$entidad
)
)
})
l %>%
addMiniMap(toggleDisplay = TRUE, position = "bottomleft") %>%
addMeasure(
position = "bottomleft",
primaryLengthUnit = "meters",
primaryAreaUnit = "sqmeters",
activeColor = "#3D535D",
completedColor = "#7D4479")%>%
addEasyButton(easyButton(
icon="fa-crosshairs",
title="Locate Me",
onClick=JS("function(btn, map){ map.locate({setView: true}); }"))) %>%
addLayersControl(
overlayGroups = names(quakes.df),
options = layersControlOptions(collapsed = FALSE)
)
cars
mtcars
help(mtcars)
knitr::opts_chunk$set(echo = TRUE)
shinyUI(fluidPage(
titlePanel("datos mtcars"),
sidebarLayout(
sidebarPanel(
textInput("titulo", “titulo gráfica:",
library(ggplot2)
ggplot(mtcars, aes(mpg, wt)) +
geom_point(aes(colour=factor(cyl))) +
facet_grid(. ~ am)
install.packages("magrittr")
library(magrittr)
library(highcharter)
highchart() %>%
hc_title(text = "Scatter chart with size and color") %>%
hc_add_series_scatter(mtcars$wt, mtcars$mpg,
mtcars$drat, mtcars$hp)
knitr::include_graphics("imagenes/imagen1.png")
knitr::include_graphics("imagenes/imagen1.png")
tabla1 <- read.csv("tablas/autos.csv")
#names(tab0002) <- c( "Estado", "Nombre", "Ubicación","Capacidad de producción")
#knitr::kable(tabla1, format = "markdown")
kableExtra::kable(tabla1) %>%
kableExtra::kable_styling(bootstrap_options = c("striped", "hover"))
tabla2 <- read.csv("tablas/autos.csv")
DT::datatable(tabla2, filter = 'top', options = list(
pageLength = 3, autoWidth = TRUE
))
tabla2 <- read.csv("tablas/autos.csv")
DT::datatable(tabla2, filter = 'top', options = list(
pageLength = 3, autoWidth = TRUE, language = list(
info = "Mostrando registros del _START_ al _END_ de un total de _TOTAL_ registros",
paginate = list(previous = 'Anterior', `next` = 'Siguiente'),
search =  "Buscar:", lengthMenu = "Mostrar _MENU_ registros" )
))
tabla2 <- read.csv("tablas/autos.csv")
names(tabla2) <- c( "Posición", "Marca", "Porcentaje de confianza")
DT::datatable(tabla2, filter = 'top', options = list(
pageLength = 3, autoWidth = TRUE, language = list(
info = "Mostrando registros del _START_ al _END_ de un total de _TOTAL_ registros",
paginate = list(previous = 'Anterior', `next` = 'Siguiente'),
search =  "Buscar:", lengthMenu = "Mostrar _MENU_ registros" )
))
knitr::opts_chunk$set(echo = TRUE)
library(magrittr)
library(highcharter)
highchart() %>%
hc_title(text = "Scatter chart with size and color") %>%
hc_add_series_scatter(mtcars$wt, mtcars$mpg,
mtcars$drat, mtcars$hp)
library(magrittr)
library(highcharter)
highchart() %>%
hc_title(text = "Scatter chart with size and color") %>%
hc_add_series_scatter(mtcars$wt, mtcars$mpg,
mtcars$hp)
mtcars
library(magrittr)
library(highcharter)
highchart() %>%
hc_title(text = "RENDIMIENTO DE COMBUSTIBLE (mpg) VS PESO DEL AUTO (x1000 lb)") %>%
hc_add_series_scatter(mtcars$wt, mtcars$mpg,
mtcars$hp)
devtools::install_github("rstudio/fontawesome")
